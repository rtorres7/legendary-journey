import { Document, Model, Schema, Types, model } from "mongoose";

/** */
export enum EventType {
  PRODUCT_VIEW = "PRODUCT_VIEW",
  PRODUCT_PRINT = "PRODUCT_PRINT",
  PRODUCT_SAVE = "PRODUCT_SAVE",
  PRODUCT_PUBLISH = "PRODUCT_PUBLISH",
}

/** */
export interface IEventLog {
  // mongo id
  eventType: EventType;
  timestamp: Date;
  userId: string;
  productId: string;
  meta: Record<string, any>;
  createdAt?: Date; // auto generated by Schema with option { timestamps: true }
  updatedAt?: Date; // auto generated by Schema with option { timestamps: true }
}

/** static methods or properties */
interface EventLogModel extends Model<IEventLog> {
  build(partial: Partial<IEventLog>): EventLogDoc;
}

/** instance methods, virtual methods or properties and overrides */
export interface EventLogDoc extends IEventLog, Document {}

const schema = new Schema<EventLogDoc, EventLogModel>(
  {
    eventType: {
      type: String,
      required: true,
      enum: Object.values(EventType),
      index: true,
    },
    timestamp: {
      type: Date,
      required: true,
      default: Date.now,
      index: true,
    },
    userId: {
      type: String,
      index: true,
    },
    productId: {
      type: String,
      index: true,
    },
    meta: {
      // This can be a mixed type that captures any additional data associated with the event
      type: Schema.Types.Mixed,
      default: {},
    },
  },
  {
    toObject: {
      virtuals: true,
    },
    toJSON: {
      transform(doc, ret) {
        // console.log("doc", doc);
        // console.log("ret", ret);
        (ret.id = ret._id.toString()), delete ret._id, delete ret.__v;
      },
    },
    // methods: {},
    // virtuals: { abc: { get() { return this.xyz; }, set(v) { this.xyz = v; } } },
    statics: {
      build: (partial: Partial<IEventLog>) => {
        return new EventLog(partial);
      },
    },
    timestamps: true,
    strict: false,
  },
);

export const EventLog = model("EventLog", schema, "event_log");

export default EventLog;
