import Joi from "joi";
import { Document, Model, Schema, Types, model } from "mongoose";

/** */
export enum AlertType {
  PRODUCT_PUBLISHED = "PRODUCT_PUBLISHED",
}

/** */
export enum AlertReadState {
  READ = "READ",
  UNREAD = "UNREAD",
}

/** */
export interface IAlert {
  title: string;
  message: string;
  userId: string;
  productNumber: string;
  createdBy?: string;
  createdAt?: Date; // auto generated by Schema with option { timestamps: true }
  updatedAt?: Date; // auto generated by Schema with option { timestamps: true }
  type: AlertType;
  readState?: AlertReadState;
  meta?: Record<string, any>;
}

/** static methods or properties */
interface AlertModel extends Model<IAlert> {
  build(partial: Partial<IAlert>): AlertDoc;
}

/** instance methods, virtual methods or properties and overrides */
export interface AlertDoc extends IAlert, Document {}

/** joi */
export const AlertValidator = Joi.object<IAlert>().keys({
  title: Joi.string().required().allow(""),
  message: Joi.string().required().allow(""),
  userId: Joi.string().required(),
  productNumber: Joi.string().required(),
  createdBy: Joi.string().optional(),
  type: Joi.string()
    .required()
    .valid(...Object.values(AlertType)),
  readState: Joi.string()
    .required()
    .valid(...Object.values(AlertReadState))
    .default(AlertReadState.UNREAD),
  meta: Joi.object().optional(),
});

/** */
const schema = new Schema<AlertDoc, AlertModel>(
  {
    title: {
      type: String,
      required: true,
      index: true,
    },
    message: {
      type: String,
      required: true,
      index: true,
    },
    userId: {
      type: String,
      required: true,
      index: true,
    },
    productNumber: {
      type: String,
      required: false,
      index: true,
    },
    createdBy: {
      type: String,
      index: false,
    },
    type: {
      type: String,
      enum: Object.values(AlertType),
      required: true,
      index: true,
    },
    readState: {
      type: String,
      enum: Object.values(AlertReadState),
      default: AlertReadState.UNREAD,
      required: true,
      index: true,
    },
    meta: {
      type: Schema.Types.Mixed,
      default: {},
    },
  },
  {
    toObject: {
      virtuals: true,
    },
    toJSON: {
      transform(doc, ret) {
        // console.log("doc", doc);
        // console.log("ret", ret);
        ret.id = ret._id.toString();
        delete ret._id;
        delete ret.__v;
      },
    },
    // methods: {},
    virtuals: {
      // abc: { get() { return this.xyz; }, set(v) { this.xyz = v; } }
    },
    statics: {
      build: (partial: Partial<IAlert>) => {
        return new Alert(partial);
      },
    },
    timestamps: true,
    strict: true,
  },
);

export const Alert = model<AlertDoc, AlertModel>("Alert", schema, "alert");

export default Alert;
