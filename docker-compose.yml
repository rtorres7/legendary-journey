version: "3.8"

services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - server
    networks:
      - your-network
    volumes:
      - ./client:/data
      - /data/node_modules
    environment:
      - API_URL=http://localhost:8081/
      - WATCHPACK_POLLING=true
    container_name: client

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "9229:9229"
    restart: always
    networks:
      - your-network
    volumes:
      - ./server:/data
      - /data/node_modules
      - /data/build
      - ./certs/localhost.crt:/etc/ssl/certs/localhost.crt
      - ./client/src/shared/assets/mocks:/tmp/mocks:ro
    depends_on: #TODO: conditions deprecated in Compose File Version 3.x
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - BASE_PATH=/api
      - ES_URL=http://elasticsearch:9200
      - MONGO_DATABASE_URL=mongodb://mongodb:27017/articles
      - POSTGRES_CONNECTION_URL=postgres://maximus:magic@postgres:5432/maximus
      - MXS_ENV=container
      - MXS_BASE_URI=https://localhost:8443
      - MXS_OAUTH_AUTH_URL=https://gxis.geoaxis.gxaws.com/ms_oauth/oauth2/endpoints/oauthservice/authorize
      - MXS_OAUTH_TOKEN_URL=https://gxisapi.gxaws.com/ms_oauth/oauth2/endpoints/oauthservice/tokens
      - MXS_OAUTH_ID=maximu3330002880002208202382
      - MXS_OAUTH_SECRET=C@lifornication1
      - MXS_OAUTH_SCOPES=UserProfile.me
      - MXS_OAUTH_CALLBACK_URL=https://localhost:8443/api/auth/callback
      - MXS_OAUTH_USER_INFO_URL=https://gxisapi.gxaws.com/ms_oauth/oauth2/ms_oauth/resources/userprofile/me
      - MXS_OAUTH_STRATEGY=geoaxis
      - NODE_EXTRA_CA_CERTS=/etc/ssl/certs/localhost.crt #TODO: trust self-signed cert to avoid "oauthError: Error: self-signed certificate"
      - NODE_TLS_REJECT_UNAUTHORIZED=0 #TODO: DO NOT USE IN PRODUCTION
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_USE_SSL=false
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=keyboard cat
    container_name: server

  postgres:
    image: postgres:15
    expose:
      - "5432"
    ports:
      - "15432:5432"
    restart: always
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - your-network
    container_name: postgres
    environment:
      POSTGRES_USER: maximus
      POSTGRES_PASSWORD: magic
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U maximus"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    build: server/src/mongo
    ports:
      - "27017:27017"
    restart: always
    volumes:
      - /data/db
    networks:
      - your-network
    container_name: mongodb
    environment:
      #MONGO_INITDB_ROOT_USERNAME: {{USERNAME}}
      #MONGO_INITDB_ROOT_PASSWORD: {{PWD}}
      MONGO_INITDB_DATABASE: articles
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.1
    container_name: elasticsearch
    restart: always
    mem_limit: 2048m #TODO: removed in 3.x (https://docs.docker.com/compose/compose-file/compose-versioning/)
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1024m -Xmx1024m
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - your-network
    healthcheck:
      test: curl -u elastic:elastic -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.6.1
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5601/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - your-network

  liquibase:
    image: liquibase/liquibase:4.23
    container_name: liquibase
    environment:
      LIQUIBASE_SECURE_PARSING: false
    volumes:
      - ./server/src/migrations:/liquibase/changelog/
    networks:
      - your-network
    command: --url=jdbc:postgresql://postgres:5432/maximus --changelog-file=changelog-root.xml --username=maximus --password=magic update
    depends_on:
      - postgres

  nginx:
    image: nginx:1.25.2
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
    ports:
      - 8443:443
    networks:
      - your-network
    depends_on:
      - server
      - client

  minio:
    image: minio/minio:RELEASE.2023-08-09T23-30-22Z
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: keyboard cat
    volumes:
      - minio-data:/data
    expose:
      - 9000
    ports:
      - "9000:9000"
      - "9001:9001" # console, random if not specified on command line
    networks:
      - your-network
    command: server /data --console-address :9001

volumes:
  elasticsearch-data:
    driver: local
  pg-data:
    driver: local
  minio-data:
    driver: local

networks:
  your-network:
    driver: bridge
